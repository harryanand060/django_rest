# Generated by Django 3.1.4 on 2021-01-13 14:15

import account.lib.auth.manager
import common.core.validators
import common.helper
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('mobile', models.CharField(error_messages={'unique': 'user with mobile already exists'}, help_text="required. mobile number must be entered in the format: '+999999999'.", max_length=16, unique=True, validators=[common.core.validators.MobileValidator()], verbose_name='mobile')),
                ('email', models.EmailField(error_messages={'unique': 'user with email already exists.'}, help_text="required. email number must be entered in the format: 'abc@abc.com'.", max_length=100, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('password', models.CharField(help_text='required. enter password.', max_length=128, verbose_name='Password')),
                ('jwt_secret', models.UUIDField(default=uuid.uuid4)),
                ('first_name', models.CharField(help_text='required. please enter name ', max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', account.lib.auth.manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Verification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unverified_mobile', models.CharField(error_messages={'unique': 'user with mobile no already exists.'}, help_text="Required. mobile number must be entered in the format: '+999999999'.", max_length=16, unique=True, validators=[common.core.validators.MobileValidator()], verbose_name='mobile')),
                ('unverified_email', models.EmailField(error_messages={'unique': 'user with email already exists.'}, help_text="Required. email number must be entered in the format: 'abc@abc.com'.", max_length=100, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('secret_key', models.CharField(default=common.helper.CommonHelper.secret_key, help_text='Hex-encoded secret key to generate totp tokens.', max_length=40, unique=True, validators=[common.core.validators.hex_validator])),
                ('last_reset_verified_counter', models.BigIntegerField(default=-1, help_text='The counter value of the latest verified reset token.The next token must be at a higher counter value.It makes sure a token is used only once.')),
                ('last_email_verified_counter', models.BigIntegerField(default=-1, help_text='The counter value of the latest verified email token.The next token must be at a higher counter value.It makes sure a token is used only once.')),
                ('last_mobile_verified_counter', models.BigIntegerField(default=-1, help_text='The counter value of the latest verified mobile token.The next token must be at a higher counter value.It makes sure a token is used only once.')),
                ('mobile_verified', models.BooleanField(default=False)),
                ('email_verified', models.BooleanField(default=False)),
                ('is_reset', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='verification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Verification',
            },
        ),
    ]
